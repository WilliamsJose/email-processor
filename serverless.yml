org: willjs
app: email-processor
service: email-processor

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  s3:
    bucketOne:
      name: ${file(./env.yml):BUCKET_NAME}
      versioningConfiguration:
        Status: Enabled
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: '*'
  environment:
    DB_NAME: ${self:custom.DB_NAME}
    DB_USERNAME: ${self:custom.DB_USERNAME}
    DB_PASSWORD: ${self:custom.DB_PASSWORD}
    QUEUE_URL:
      'Fn::GetAtt': [queueFIFO, QueueUrl]
    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}

custom:
  DB_NAME: ${file(./env.yml):DB_NAME}
  DB_USERNAME: ${file(./env.yml):DB_USERNAME}
  DB_PASSWORD: ${file(./env.yml):DB_PASSWORD}
  POSTGRESQL:
    HOST:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]

plugins:
  - serverless-lift

functions:
  processEmail:
    handler: processEmail.handler
    description: 'On email saved in s3 bucket, get attachments and send SQS message for each file line.'
    timeout: 10
    memorySize: 256
    tracing: PassThrough
    events:
      - s3:
          bucket: ${file(./env.yml):BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: emails/
  processQueue:
    handler: processQueue.handler
    description: 'Read one message and save into PostgreSQL.'
    timeout: 10
    memorySize: 256
    tracing: PassThrough
    events:
      - sqs:
          batchSize: 1
          arn:
            'Fn::GetAtt': [queueFIFO, Arn]

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
resources:
  Resources:
    queueFIFO:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        DelaySeconds: 0

    PostgreSqlRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${self:custom.DB_USERNAME}
        MasterUserPassword: ${self:custom.DB_PASSWORD}
        AllocatedStorage: '20'
        DBName: ${self:custom.DB_NAME}
        DBInstanceClass: db.t3.micro
        Engine: postgres
        PubliclyAccessible: true
        BackupRetentionPeriod: 1

    RDSSecurityGroup:
      Type: AWS::RDS::DBSecurityGroup
      Properties:
        GroupDescription: Security Group for RDS DB
        DBSecurityGroupIngress:
          - CIDRIP: 0.0.0.0/0

    QueueFifoSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref queueFIFO
        PolicyDocument:
          Statement:
            - Sid: Allow-Send-And-Receive-Message
              Action:
                - 'SQS:SendMessage'
                - 'SQS:ReceiveMessage'
              Effect: 'Allow'
              Principal:
                AWS: '*'
              Resource: '*'

    S3EMailBucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ${file(./env.yml):BUCKET_REF}
        PolicyDocument:
          Statement:
            - Principal:
                Service: 'ses.amazonaws.com'
              Action:
                - s3:PutObject
              Effect: Allow
              Sid: 'AllowSESPuts'
              Resource:
                Fn::Join:
                  [
                    '',
                    [
                      'arn:aws:s3:::',
                      Ref: '${file(./env.yml):BUCKET_REF}',
                      '/*',
                    ],
                  ]
              Condition:
                StringEquals:
                  'aws:Referer': { Ref: AWS::AccountId }

    SESReceiptRuleSet:
      Type: AWS::SES::ReceiptRuleSet
      Properties:
        RuleSetName: myRuleSet

    SESRule:
      Type: AWS::SES::ReceiptRule
      DependsOn:
        - SESReceiptRuleSet
        - S3EMailBucketPermissions
      Properties:
        RuleSetName:
          Ref: SESReceiptRuleSet
        Rule:
          Name: SaveEmailToS3
          Enabled: true
          TlsPolicy: Optional
          Recipients:
            - ${file(./env.yml):TEST_DOMAIN}
            - ${file(./env.yml):PERSONAL_DOMAIN}
          Actions:
            - S3Action:
                BucketName: ${file(./env.yml):BUCKET_NAME}
                ObjectKeyPrefix: emails/
